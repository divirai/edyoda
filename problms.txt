//Rest Assured assigment with TestNG
package GetUser;

import com.google.gson.internal.bind.util.ISO8601Utils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.testng.Assert;
import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.annotations.*;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;
import org.testng.annotations.*;
import static io.restassured.RestAssured.*;
import static java.sql.Types.NUMERIC;
import static org.codehaus.groovy.syntax.Types.STRING;

import reusable.reusableBody;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.*;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

import java.io.FileInputStream;

public class workshop

{
    String year = null;
    reusableBody rs;

    //Added some code
    String address=null;

    @BeforeClass
    public void setUp()
    {

        rs = new reusableBody();
    }
    String population;


    @Test
    public void readfrom_excelpratice()
    {


        try {

            //String ops=new FileOutputStream("C:/Users/divakarab/test1.txt");


            String filepath="C:/Users/divakarab/IdeaProjects/TestNGNEW/src/data.xlsx";
            //open the file
            FileInputStream inputsteam =new FileInputStream(filepath);
            //get the work book
            Workbook workbook = new XSSFWorkbook(inputsteam);
//get Sheet
            Sheet sheet =workbook.getSheet("users");
          int rocount=sheet.getLastRowNum();
            int colsms=sheet.getRow(1).getLastCellNum();
            System.out.println("Number of rows : :"+ rocount);
          //  String celldata=sheet.getRow(5).getCell(2).getStringCellValue();


            System.out.println("Value in Cell is : :"+ colsms);


            for (int r=0;r<=rocount;r++)

            {
                Row row = sheet.getRow(r);


                for (int c=0;c<=colsms;c++)

                {
                    Cell cell = row.getCell(c);

           switch (cell.getCellType())

           {

               case STRING: System.out.println(cell.getStringCellValue());
           }
                }



                }


//USing for loop



        }

        catch (Throwable e)
        {
            System.out.println("No file Found");
        }

    }


}
_________________________




Cucumber 

     @assinment
  Scenario Outline: Assement
    Given User enter the cecuos "<celsious>"
    When  w3schools bosdyused
    When  w3schools User send a post call with"<url>"
    When  user w3schoolscode  as for post"<status_code1>"
_______________________

JAVA 

 @Given("User enter the cecuos {string}")
    public void User_enter_the_cecuos(String celcuos) {
        Celc =celcuos;


    }




    @Then("w3schools bosdyused")
    public void w3schools_bosdyused() {

        request_body1 = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                "<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n" +
                "  <soap12:Body>\n" +
                "    <CelsiusToFahrenheitResponse xmlns=\"https://www.w3schools.com/xml/\">\n" +
                "      <CelsiusToFahrenheitResult>"+Celc+"</CelsiusToFahrenheitResult>\n" +
                "    </CelsiusToFahrenheitResponse>\n" +
                "  </soap12:Body>\n" +
                "</soap12:Envelope>" ;




    }
    @Given("w3schools User send a post call with{string}")
    public void w3schools_user_send_a_post_call_with(String actuaURL) {
        response = given().contentType(ContentType.XML).header("Content-Type","text/xml; charset=utf-8")
                .body(request_body1).when().post(actuaURL);
        System.out.println("Response "+ response.getBody().asString());


    }



    @When("user w3schoolscode  as for post{string}")
    public void use_w3schoolscode_as_for_post(String acststuscode) {
        int statusCode1 = response.statusCode();
        Assert.assertEquals(String.valueOf(statusCode1),acststuscode);

    }


__________________________

Runner 


  @assinment
  Scenario Outline: Assement
    Given User enter the cecuos "<celsious>"
    When  w3schools bosdyused
    When  w3schools User send a post call with"<url>"
    When  user w3schoolscode  as for post"<status_code1>"



_______


package assignments_edyoda;

   

public class Problems {
	//problem 14 and 21 , 5
	
	static public void problem14() 
	{
	
		   System.out.println(java.time.LocalDate.now());   
	}
	
	
	
	static public void Problem19() 
	{
	String myStr = "Davi Beckham";
    System.out.println(myStr.replace("Davi Beckham", "David Beckham"));
    String myStr1 = "400";
    System.out.println(myStr1.replace("400", "579"));
    
    
    
	}
	
	 
	static public void problem21() 
	{
	String myStr = "Liverpool";
    System.out.println(myStr.replace("Liverpool", "Liverpool Football Club"));
    String myStr1 = "City";
    System.out.println(myStr1.replace("City", "Manchester City"));
    
    
    
	}
	
	
	static public void problem22() 
	{
	String myStr = "Narendra Modi";
    System.out.println(myStr.toUpperCase());
 
    
    
    
	}
	
	
	static public void problem5() 
	{
	
	for (int i=500;i<=1000;i++)
	{
		if (i==808)
		{
			 System.out.println("Printing when loop reached to 808 :: " + i);    
		}
			
	}
	}
	static public void Problem_20() 
	{
	
		 String str1 = "Cristiano Ronaldo";
	        String str2 = "Ronaldo Nazario";

	        // Check if the two strings are equal using the equals() method
	        boolean isEqual = str1.equals(str2);

	        // Print the result
	        System.out.println(isEqual); // Output: true
	}
	
	static public void Problem_17() 
	{
	  int a=40;
	  
	  if(a % 2 == 0)
		{
			 System.out.println("Even");    
		}
	  
	  else 
	  {System.out.println("Odd Number");    
		  
	  }
	}
	
	
	
	
	public static void main(String[] args) {
	 
		problem14();
		problem21() ;
		
		
		problem5();
		
		problem22();
		Problem_20() ;
		 Problem19();
		 
		 Problem_17() ;
	}
	
	
	
	

}


package assignments_edyoda;

public class Problem_24 {

	
	public Problem_24(int a,int b)
	{
		 System.out.println(a*b);   
	}
	
	public Problem_24(int a , int b, int c)
	{
		 System.out.println(a*b+c);   
	}
	public Problem_24(String a)
	{
		 System.out.println(a);   
	}
	

	public static void main(String[] args) {
		 
		Problem_24 p1=new Problem_24(12,78);
		Problem_24 p2=new Problem_24(12,78,89);
		
		Problem_24 p3=new Problem_24("Divakar");
	}

}


package assignments_edyoda;

 

class Parent
{
	int x=30;
    Parent()
    {
        System.out.println("Non-Param of parent");
    }
    Parent(int x)
    {
        System.out.println("Param of parent "+this.x);
    }
}

class Child extends Parent
{
    Child()
    {
        System.out.println("Non-Param of child");
    }
    Child(int y)
    {
        System.out.println("Param of child");
    }
    Child(int x,int y)
    {
        super(x);
        System.out.println("2 param of child "+y);
    }
}

public class Problem2 {

    public static void main(String[] args) {
        //Child c=new Child();
        //Child c=new Child(20);
        Child c=new Child(80,20);
    }
    
}


package assignments_edyoda;

public class Problem4 {

	public static void main(String[] args) {


		String day ="multi";
		int a=12, b=10;
		
		switch (day) 
		{
		  case "add":
			  System.out.println(a+b);
		    break;
		  case "multi":
			  System.out.println(a*b);
		    break;
		  case "division":
			  System.out.println(a/b);		  
			  
		    break;
		  case "sub":
			  System.out.println(a-b);
		}
		

	}

}


package com.test.java;

import java.util.HashSet;

public class Problem6 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		
		HashSet<Integer> hs = new HashSet<Integer>();
		
		hs.add(10);
		hs.add(30);
		
		hs.add(20);
		
      hs.add(10);
		
		hs.add(30);
		
		hs.remove(20);
		
		 System.out.println("Hashset "+ hs);// no duplicate value re allowed
		
		

	}

}

_________________________________

package GetUser;

import io.restassured.http.ContentType;
import io.restassured.response.Response;
import org.testng.annotations.*;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;
import org.testng.annotations.Test;
import static io.restassured.RestAssured.*;
import reusable.reusableBody;
import com.aventstack.extentreports.ExtentReports;
import com.aventstack.extentreports.ExtentTest;
import com.aventstack.extentreports.reporter.*;

public class NewUSer {

    reusableBody RJB;

    public int role=5;

    private ExtentSparkReporter spark;
    private ExtentReports extent;
    private ExtentTest logger;



    Response response;
    @BeforeClass
    public void Opeconnection()
    {
        System.out.println("Open connection");

        RJB=new reusableBody();
    }


    @Parameters({"requrl","name","SSN"})
    @Test(groups= {"smoke"})
    public void adduser(String requrl, String name, String SSN)
    {

        Opeconnection();
        Response rest = given()
                .contentType(ContentType.JSON)
                .body(RJB.CreateUserJsonBody(name, SSN))
                .when()
                .post(requrl);

        int statuccode =rest.statusCode();
        String responsebody =rest.getBody().asString();

        System.out.println("Ststus Code : " + statuccode);
        System.out.println("Response body: "+ responsebody);


        String userID =rest.getBody().jsonPath().getString("id");
        String job =rest.getBody().jsonPath().getString("job");

        System.out.println("Response body: "+ userID);
        System.out.println("Response body: "+ job);

    }


    @Parameters({"requrldelete"})
    @Test(groups= {"smoke"})
    public void deleteuser(String requrldelete)
    {

         when()
                .post(requrldelete).
                then().statusCode(415).log().all();

        System.out.println("User DSeletes ");

    }


    @Parameters({"celsURL","celsios","excpectefanse"})
    @Test(groups= {"reggresion"})
    public void clecusoistofanern(String celsURL, String celsious, String expcted)
    {

        Opeconnection();
        Response rest = given()
                .contentType(ContentType.XML)
                .body(RJB.celsios_to_farenrequestbosy(celsious))
                .when()
                .post(celsURL);

        int statuccode =rest.statusCode();
        String responsebody =rest.getBody().asString();

        System.out.println("Ststus Code : " + statuccode);
        System.out.println("Response body: "+ responsebody);


    }
    @Parameters({"bookurl"})
    @Test(groups= {"final"}, priority = 1)

    public void book_xml(String bookurl)
    {
        String baseurl=null;
        System.out.println( "Book XML URL is : "+bookurl);

    }



    @Test

    public void valiadateWithContains()
    {
        Response response = get("https://reqres.in/api/users?page=2");
        String res= response.getBody().asString();
        int jsonPathCount = response.getBody().jsonPath().getList("data.first_name").size();
        System.out.println("Count is:"+jsonPathCount);
        for(int a = 0;a<jsonPathCount;a++){
            String id =response.getBody().jsonPath().getString("data.id["+a+"]");
            String email =response.getBody().jsonPath().getString("data.email["+a+"]");
            System.out.println("If id value is:"+id+" Then email value is:"+email);
        }
    }



XML File 

    @AfterClass
    public void closeconnection()
    {
        System.out.println("Close connection");
    }
}





<suite name="reg" verbose="1" parallel="methods">


     <test name="NewUSer">

         <parameter name="requrl" value="https://reqres.in/api/users"></parameter>
         <parameter name="requrldelete" value="https://reqres.in/api/users/2"></parameter>




         <parameter name="name" value="Raksha"></parameter>
         <parameter name="SSN" value="545944999"></parameter>


        <parameter name="celsURL" value="https://www.w3schools.com/xml/tempconvert.asmx"></parameter>
        <parameter name="celsios" value="5" ></parameter>
         <parameter name="excpectefanse" value="41" ></parameter>
         <parameter name="bookurl" value="https://chercher.tech/sample/api/books.xml" ></parameter>
         <parameter name="rerwsGet" value="https://reqres.in/api/users?page=2" ></parameter>



         <classes>
            <class name="GetUser.NewUSer" />
        </classes>
    </test>
</suite>

Reusability 


package reusable;


import io.restassured.response.Response;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.testng.annotations.Test;

import java.io.FileInputStream;
public class reusableBody {

    public String CreateUserJsonBody(String name , String SSN){

        String body = "{\n" +
                "    \"name\": \""+name+"\",\n" +
                "    \"job\": \"NEW DEA\",\n" +
                "    \"Address\": \"123 Bangalore Karnataka\",\n" +
                "    \"SSN\": \"" +SSN+ "\"\n" +
                "}";

        return body;
    }

    public String celsios_to_farenrequestbosy(String Celc)

    {
       String  request_body1 = "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n" +
                "<soap12:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:soap12=\"http://www.w3.org/2003/05/soap-envelope\">\n" +
                "  <soap12:Body>\n" +
                "    <CelsiusToFahrenheitResponse xmlns=\"https://www.w3schools.com/xml/\">\n" +
                "      <CelsiusToFahrenheitResult>"+Celc+"</CelsiusToFahrenheitResult>\n" +
                "    </CelsiusToFahrenheitResponse>\n" +
                "  </soap12:Body>\n" +
                "</soap12:Envelope>" ;

        return request_body1;


    }



    public String readingXLFileAsPerTestData(String testcaseName, String colName) {

        String data = null;
        try {
            // String xlFile = System.getProperty(user.dir)
            String xlFile = "C:\\Users\\divakarab\\IdeaProjects\\TestNGNEW\\src\\data.xlsx";
            FileInputStream myxlfile1 = new FileInputStream(xlFile);
            Workbook workbook = new XSSFWorkbook(myxlfile1);
            Sheet sheet = workbook.getSheet("new");
            int lastrow = sheet.getLastRowNum();
            System.out.println("The last row number which has data is:" + lastrow);

            //loop for row iteration
            for (int i = 0; i <= lastrow; i++) {
                Row row = sheet.getRow(i);
                //get the  last column which has data
                int lastCell = row.getLastCellNum();
                Cell cell = row.getCell(0);
                String runTimeTestCaseName = cell.getStringCellValue();

                if (runTimeTestCaseName.equals(testcaseName)) {

                    //Loop for column iteration
                    Row rowNew = sheet.getRow(0);
                    for (int j = 1; j < lastCell; j++) {
                        Cell cell1 = rowNew.getCell(j);
                        String runTimeCellValue = cell1.getStringCellValue();
                        if (runTimeCellValue.equals(colName)) {
                            data = sheet.getRow(i).getCell(j).toString();
                            System.out.println("The title value is :" + data);
                        }
                    }
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();

        }
        return data;
    }


    public String workshopreadlexcelfile(int year, int population) {

        String data = null;
        try {
            // String xlFile = System.getProperty(user.dir)
            String xlFile = "C:\\Users\\divakarab\\IdeaProjects\\TestNGNEW\\src\\data.xlsx";
//go to File
            FileInputStream myxlfile1 = new FileInputStream(xlFile);
            //got to workbook
            Workbook workbook = new XSSFWorkbook(myxlfile1);
            Sheet sheet = workbook.getSheet("work");
            int lastrow = sheet.getLastRowNum();
            System.out.println("The last row number which has data is:" + lastrow);

            //loop for row iteration
            for (int i = 0; i <= lastrow; i++) {
                Row row = sheet.getRow(i);
                //get the  last column which has data
                int lastCell = row.getLastCellNum();
                Cell cell = row.getCell(0);
                String runTimeTestCaseName = cell.getStringCellValue();

                if (runTimeTestCaseName.equals(year)) {

                    //Loop for column iteration
                    Row rowNew = sheet.getRow(0);
                    for (int j = 1; j < lastCell; j++) {
                        Cell cell1 = rowNew.getCell(j);
                        String runTimeCellValue = cell1.getStringCellValue();
                        if (runTimeCellValue.equals(population)) {
                            data = sheet.getRow(i).getCell(j).toString();
                            System.out.println("The title value is :" + data);
                        }
                    }
                }
            }
        }
        catch (Exception e) {
            e.printStackTrace();

        }
        return data;
    }

    public String statuscodeconvert(String statuscode) {

        String Flag = null;

        {

            try
            {
                float f;
                int val;
                f = Float.parseFloat(statuscode);
                val =(int)f;
                Flag=String.valueOf(val);
                System.out.println("The last row number which has data is:" + Flag);



            }
            catch (Exception e) {
                e.printStackTrace();

            }


            return Flag;


        }
    }

}
